blueprint:
  name: Heizungssteuerung (V4.16)
  description: >
    Steuert die Heizung basierend auf dem Anwesenheitsstatus. Priorisiert manuelle Eingriffe und behandelt Sonderfälle wie Gäste- und Urlaubsmodus.
    
    ⚠️ WICHTIGER HINWEIS: Wenn "Scheduler aktivieren" = true, muss auch eine "Zeitplan" Entity konfiguriert werden!
  domain: automation
  source_url: https://github.com/fabsss/heating_control/blob/main/heating_control.yaml
  input:
    heating_entities:
      name: Heizkörper
      description: Der zu steuernde Heizkörperthermostat.
      selector:
        entity:
          domain: climate
          multiple: false
    flat_occupation_state:
      name: Anwesenheitsstatus
      description: Input Select, der den Status der Wohnung abbildet (z.B. Home, Away, Sleep).
      selector:
        entity:
          domain: input_select
    heating_on_off:
      name: (Optional) Heizung An/Aus (Winter-Modus)
      description: Optional - Input Boolean, der die Heizungssteuerung global aktiviert oder deaktiviert. Wenn nicht gesetzt, ist die Heizung immer aktiv.
      default: []
      selector:
        entity:
          domain: input_boolean
          multiple: false
    eco_temperature:
      name: Eco-Temperatur
      description: Die Temperatur in °C für die Modi "Away", "Sleep" und nach der Nacht-Umschaltungszeit
      default: 17.0
      selector:
        number:
          min: 5
          max: 25
          unit_of_measurement: "°C"
          step: 0.5
    comfort_temperature:
      name: Komfort-Temperatur
      description: Die Temperatur in °C, die vom Scheduler gesetzt wird.
      default: 21.0
      selector:
        number:
          min: 15
          max: 30
          unit_of_measurement: "°C"
          step: 0.5
    
    # Optionaler Scheduler
    scheduler_enabled:
      name: Scheduler aktivieren
      description: Wenn aktiviert, wird der Zeitplan für die Komfort-Temperatur verwendet.
      default: false
      selector:
        boolean: {}
    scheduler_toggle:
      name: (Optional) Scheduler Ein/Aus Toggle
      description: Optional - Input Boolean zur Laufzeit-Steuerung des Schedulers. Hat Vorrang vor "Scheduler aktivieren".
      default: []
      selector:
        entity:
          domain: input_boolean
          multiple: false
    schedule_entity:
      name: (Optional) Zeitplan
      description: >
        Schedule-Helper für die Komforttemperatur-Zeiten. 
        WICHTIG: Wird benötigt wenn "Scheduler aktivieren" = true ist oder eine Scheduler Toggle-Variable übergeben wird.
      default: []
      selector:
        entity:
          domain: schedule
          multiple: false
    office_day_eco_override:
      name: (Optional) Office-Modus (Scheduler deaktiviert)
      description: Optional - Binary Sensor, welche aktiv ist wenn an einem Arbeitstag im Büro gearbeitet wird. In diesem Fall wird der Scheduler ignoriert.
      default: []
      selector:
        entity:
          domain: binary_sensor
          multiple: false
          
    # Optionaler täglicher Reset
    daily_eco_time:
      name: Zeit für nächtliche Eco-Umschaltung
      description: Die Uhrzeit, zu der die Heizung im "Guest Mode" auf Eco gesetzt wird.
      default: "01:00:00"
      selector:
        time: {}

# Wir verwenden den 'restart' Modus für saubere Ausführung
mode: restart
max_exceeded: silent

variables:
  # Eingänge für einfacheren Zugriff
  heating_entities: !input heating_entities
  flat_occupation_state: !input flat_occupation_state
  heating_on_off: !input heating_on_off
  scheduler_enabled: !input scheduler_enabled
  scheduler_toggle: !input scheduler_toggle
  office_day_eco_override: !input office_day_eco_override
  schedule_entity: !input schedule_entity

  # Keine scene_id Variable mehr nötig, wird durch restore_scene ersetzt

  # Logik-Variablen
  is_heating_season: "{{ (heating_on_off != [] and states(heating_on_off) == 'on') or heating_on_off == [] }}"
  is_scheduler_active: "{{ states(schedule_entity) == 'on' }}" # Scheduler in "on"-Zustand
  # Scheduler-Logik: input_boolean hat Vorrang vor statischer scheduler_enabled Variable
  is_scheduler_enabled: >
    {{ 
      (
        (scheduler_toggle != [] and states(scheduler_toggle) == 'on') or 
        (scheduler_toggle == [] and scheduler_enabled)
      ) and 
      (office_day_eco_override == [] or states(office_day_eco_override) == 'off')
    }}
  was_home_before: "{{ trigger is defined and trigger.from_state is defined and trigger.from_state.state in ['Home', 'Leaving'] }}"



# Trigger: Löst bei jeder relevanten Änderung aus
trigger:
  - platform: state
    entity_id: !input flat_occupation_state
    id: "occupation_change"
  - platform: template
    value_template: "{{ heating_on_off != [] and is_state(heating_on_off, ['on', 'off']) }}"
    id: "heating_toggle"
  - platform: template
    value_template: "{{ scheduler_enabled and schedule_entity != [] and is_state(schedule_entity, ['on', 'off']) }}"
    id: "schedule_change"
  - platform: template
    value_template: "{{ scheduler_toggle != [] and is_state(scheduler_toggle, ['on', 'off']) }}"
    id: "scheduler_toggle_change"
  - platform: time
    at: !input daily_eco_time
    id: "nightly_eco_time"

action:
  # Validierung: Scheduler aktiviert aber keine Schedule Entity gesetzt
  - if:
      - condition: template
        value_template: "{{ scheduler_enabled and schedule_entity == [] }}"
    then:
      - service: persistent_notification.create
        data:
          title: "❌ Heizungssteuerung Konfigurationsfehler"
          message: >
            Die Automation "{{ this.attributes.friendly_name }}" ist fehlerhaft konfiguriert:
            
            - "Scheduler aktivieren" ist auf TRUE gesetzt
            - Aber "Zeitplan" Entity ist nicht konfiguriert
            
            Bitte korrigieren Sie die Automation-Konfiguration!
          notification_id: "heating_control_config_error_{{ this.entity_id | replace('.', '_') }}"
      - stop: "Konfigurationsfehler: Scheduler aktiviert aber keine Schedule Entity"
      
  - choose:
      # --- HÖCHSTE PRIORITÄT: HEIZUNG AUS ---
      - conditions:
          - condition: template
            value_template: >-
              {{ not is_heating_season or is_state(flat_occupation_state, 'Vacation') }}
        sequence:
          - service: climate.turn_off
            target:
              entity_id: !input heating_entities

      # --- ZWEITE PRIORITÄT: Heizung ausschalten beim Verlassen  ---
      - conditions:
          - condition: trigger
            id: "occupation_change"
          - condition: template
            value_template: "{{ was_home_before }}"
          - condition: state
            entity_id: !input flat_occupation_state
            state:
              - "Away"
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input heating_entities
            data:
              hvac_mode: "off" # war: heat - Schaltet Heizung aus, wenn weg

      # --- DRITTE PRIORITÄT: ECO BEI SLEEP ---
      - conditions:
          - condition: trigger
            id: "occupation_change"
          - condition: state
            entity_id: !input flat_occupation_state
            state:
              - "Sleep"
        sequence:
          # Smart Temperature Setting: Sicherstellen dass Thermostat Temperatur akzeptiert
          - variables:
              current_hvac_mode: "{{ state_attr(heating_entities, 'hvac_mode') }}"
              need_temp_restore: "{{ current_hvac_mode == 'off' }}"
          - if:
              - condition: template
                value_template: "{{ need_temp_restore }}"
            then:
              # Temporär einschalten für Temperatur-Setting
              - service: climate.set_hvac_mode
                target:
                  entity_id: !input heating_entities
                data:
                  hvac_mode: heat
              - delay: "00:00:02"  # Kurz warten damit Thermostat bereit ist
          # Temperatur setzen (funktioniert jetzt sicher)
          - service: climate.set_temperature
            target:
              entity_id: !input heating_entities
            data:
              temperature: !input eco_temperature
          # Falls ursprünglich aus, wieder ausschalten
          - if:
              - condition: template
                value_template: "{{ need_temp_restore }}"
            then:
              - service: climate.set_hvac_mode
                target:
                  entity_id: !input heating_entities
                data:
                  hvac_mode: "{{ current_hvac_mode }}"
              
      # --- NÄCHTLICHE ECO-UMSCHALTUNG UND RESET DER MANUELLEN EINGRIFFE ---
      - conditions:
          - condition: trigger
            id: "nightly_eco_time"
        sequence:
          # Smart Temperature Setting für nächtliche Umschaltung
          - variables:
              current_hvac_mode: "{{ state_attr(heating_entities, 'hvac_mode') }}"
              need_temp_restore: "{{ current_hvac_mode == 'off' }}"
          - if:
              - condition: template
                value_template: "{{ need_temp_restore }}"
            then:
              # Temporär einschalten für Temperatur-Setting
              - service: climate.set_hvac_mode
                target:
                  entity_id: !input heating_entities
                data:
                  hvac_mode: heat
              - delay: "00:00:02"
          # Temperatur setzen
          - service: climate.set_temperature
            target:
              entity_id: !input heating_entities
            data:
              temperature: !input eco_temperature
          # Wiederherstellen des Heizmodus, wenn Anwesenheitsstatus "Home" ist (sonst passiert das beim nach Hause kommen)
          - if:
            - condition: state
              entity_id: !input flat_occupation_state
              state: "Home"
            then:
              - service: climate.set_hvac_mode
                target:
                  entity_id: !input heating_entities
                data:
                  hvac_mode: heat
            else:
              - service: climate.set_hvac_mode
                target:
                  entity_id: !input heating_entities
                data:
                  hvac_mode: off

              
      # --- ZUSTAND WIEDERHERSTELLEN BEI ANKUNFT (NUR NACH AWAY UND WENN SZENE EXISTIERT) ---
      - conditions:
          - condition: trigger
            id: "occupation_change"
          - condition: state
            entity_id: !input flat_occupation_state
            state:
              - "Coming Home"
              - "Home"
          - condition: template
            value_template: "{{ trigger.from_state.state == 'Away' }}"
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input heating_entities
            data:
              hvac_mode: heat
          
    # --- STANDARD-LOGIK (WIRD AUSGEFÜHRT, WENN KEINE DER OBIGEN BEDINGUNGEN ZUTRIFFT) ---
    default:
      - if:
          # Bedingung 1: Scheduler wurde aktiviert UND Anwesenheitsstatus ist "Home"
          - condition: and
            conditions:
              - condition: template
                value_template: "{{ is_scheduler_enabled and is_scheduler_active }}"
              - condition: or
                conditions:
                  - condition: trigger
                    id: "schedule_change"
                  - condition: trigger
                    id: "scheduler_toggle_change"
                  - condition: and
                    conditions:
                      - condition: trigger
                        id: "heating_toggle"
                      - condition: template
                        value_template: "{{ is_heating_season }}"
        then:
          # Smart Temperature Setting für Scheduler-Aktivierung (Komfort-Temperatur)
          - variables:
              current_hvac_mode: "{{ state_attr(heating_entities, 'hvac_mode') }}"
              need_temp_restore: "{{ current_hvac_mode == 'off' }}"
          - if:
              - condition: template
                value_template: "{{ need_temp_restore }}"
            then:
              # Temporär einschalten für Temperatur-Setting
              - service: climate.set_hvac_mode
                target:
                  entity_id: !input heating_entities
                data:
                  hvac_mode: heat
              - delay: "00:00:02"
          # Komfort-Temperatur setzen
          - service: climate.set_temperature
            target:
              entity_id: !input heating_entities
            data:
              temperature: !input comfort_temperature
          # Falls ursprünglich aus war, wieder ausschalten
          - if:
              - condition: template
                value_template: "{{ need_temp_restore }}"
            then:
              - service: climate.set_hvac_mode
                target:
                  entity_id: !input heating_entities
                data:
                  hvac_mode: "{{ current_hvac_mode }}"
      # Bedingung 2: Scheduler wurde deaktiviert UND Anwesenheitsstatus ist weiterhin "Home"
      - if:
          - condition: and
            conditions:
              - condition: or
                conditions:
                - condition: trigger
                  id: "schedule_change"
                - condition: trigger
                  id: "scheduler_toggle_change"
                - condition: and
                  conditions:
                    - condition: trigger
                      id: "heating_toggle"
                    - condition: template
                      value_template: "{{ is_heating_season }}"
              - condition: template
                value_template: "{{ is_scheduler_enabled and not is_scheduler_active }}"
        then:
          # Smart Temperature Setting für Scheduler-Deaktivierung (ECO-Temperatur)
          - variables:
              current_hvac_mode: "{{ state_attr(heating_entities, 'hvac_mode') }}"
              need_temp_restore: "{{ current_hvac_mode == 'off' }}"
          - if:
              - condition: template
                value_template: "{{ need_temp_restore }}"
            then:
              # Temporär einschalten für Temperatur-Setting
              - service: climate.set_hvac_mode
                target:
                  entity_id: !input heating_entities
                data:
                  hvac_mode: heat
              - delay: "00:00:02"
          # ECO-Temperatur setzen
          - service: climate.set_temperature
            target:
              entity_id: !input heating_entities
            data:
              temperature: !input eco_temperature
          # Falls ursprünglich aus war, wieder ausschalten
          - if:
              - condition: template
                value_template: "{{ need_temp_restore }}"
            then:
              - service: climate.set_hvac_mode
                target:
                  entity_id: !input heating_entities
                data:
                  hvac_mode: "{{ current_hvac_mode }}"