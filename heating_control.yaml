blueprint:
  name: Heizungssteuerung (V3.06)
  description: Steuert die Heizung basierend auf dem Anwesenheitsstatus. Priorisiert manuelle Eingriffe und behandelt Sonderfälle wie Gäste- und Urlaubsmodus..
  domain: automation
  source_url: https://github.com/fabsss/heating_control/blob/main/heating_control.yaml
  input:
    heating_entities:
      name: Heizkörper
      description: Der zu steuernde Heizkörperthermostat.
      selector:
        entity:
          domain: climate
          multiple: false
    flat_occupation_state:
      name: Anwesenheitsstatus
      description: Input Select, der den Status der Wohnung abbildet (z.B. Home, Away, Sleep).
      selector:
        entity:
          domain: input_select
    heating_on_off:
      name: (Optional) Heizung An/Aus (Winter-Modus)
      description: Optional - Input Boolean, der die Heizungssteuerung global aktiviert oder deaktiviert. Wenn nicht gesetzt, ist die Heizung immer aktiv.
      default: []
      selector:
        entity:
          domain: input_boolean
          multiple: false
    eco_temperature:
      name: Eco-Temperatur
      description: Die Temperatur in °C für die Modi "Away", "Sleep" und nach der Nacht-Umschaltungszeit
      default: 17.0
      selector:
        number:
          min: 5
          max: 25
          unit_of_measurement: "°C"
          step: 0.5
    comfort_temperature:
      name: Komfort-Temperatur
      description: Die Temperatur in °C, die vom Scheduler gesetzt wird.
      default: 21.0
      selector:
        number:
          min: 15
          max: 30
          unit_of_measurement: "°C"
          step: 0.5
    
    # Optionaler Scheduler
    scheduler_enabled:
      name: Scheduler aktivieren
      description: Wenn aktiviert, wird der Zeitplan für die Komfort-Temperatur verwendet.
      default: false
      selector:
        boolean: {}
    schedule_entity:
      name: (Optional) Zeitplan
      description: Schedule-Helper für die Komforttemperatur-Zeiten. Wird nur benötigt, wenn der Scheduler aktiviert ist.
      default: []
      selector:
        entity:
          domain: schedule
          multiple: false
          
    # Optionaler täglicher Reset
    daily_eco_time:
      name: Zeit für nächtliche Eco-Umschaltung
      description: Die Uhrzeit, zu der die Heizung im "Guest Mode" auf Eco gesetzt wird.
      default: "01:00:00"
      selector:
        time: {}

# Wir verwenden den 'restart' Modus für saubere Ausführung
mode: restart
max_exceeded: silent

variables:
  # Eingänge für einfacheren Zugriff
  heating_entities: !input heating_entities
  flat_occupation_state: !input flat_occupation_state
  heating_on_off: !input heating_on_off
  scheduler_enabled: !input scheduler_enabled
  # Sicherer Zugriff auf optionale Schedule-Entity
  schedule_entity: "{{ schedule_entity if schedule_entity != [] else '' }}"

  # Szenename (individuell pro Thermostat)
  scene_id: "heating_restore_{{ heating_entities | replace('climate.', '') | replace('.', '_') }}"

  # Logik-Variablen
  is_heating_season: "{{ heating_on_off != [] and states(heating_on_off) == 'on' or heating_on_off == [] }}"
  is_scheduler_active: "{{ scheduler_enabled and schedule_entity != [] and states(schedule_entity) == 'on' }}"
  was_home_before: "{{ trigger.from_state.state in ['Home', 'Leaving'] }}"

# Trigger: Löst bei jeder relevanten Änderung aus
trigger:
  - platform: state
    entity_id: !input flat_occupation_state
    id: "occupation_change"
  - platform: state
    entity_id: !input heating_on_off
    id: "heating_toggle"
    enabled: "{{ heating_on_off != [] }}"
  - platform: state
    enabled: !input scheduler_enabled
    entity_id: !input schedule_entity
    id: "schedule_change"
  - platform: time
    at: !input daily_eco_time
    id: "nightly_eco_time"
  - platform: state
    entity_id: scheduler_enabled
    id: "scheduler_enabled_change"

action:
  - choose:
      # --- NEU: AUTOMATION RELOAD BEI SCHEDULER_ENABLED TOGGLE ---
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'scheduler_enabled_change' }}"
        sequence:
          - service: automation.reload
            data: {}
      # --- HÖCHSTE PRIORITÄT: HEIZUNG AUS ---
      - conditions:
          - condition: template
            value_template: >-
              {{ not is_heating_season or is_state(flat_occupation_state, 'Vacation') }}
        sequence:
          - service: climate.turn_off
            target:
              entity_id: !input heating_entities

      # --- ZWEITE PRIORITÄT: ZUSTAND SPEICHERN UND ECO BEIM VERLASSEN ---
      - conditions:
          - condition: trigger
            id: "occupation_change"
          - condition: template
            value_template: "{{ was_home_before }}"
          - condition: state
            entity_id: !input flat_occupation_state
            state:
              - "Away"
        sequence:
          - service: scene.create
            data:
              scene_id: "heating_restore_{{ heating_entities | replace('.', '_') }}"
              snapshot_entities: "{{ heating_entities }}"
          # - service: climate.set_temperature
          #   target:
          #     entity_id: !input heating_entities
          #   data:
          #     temperature: !input eco_temperature
          - service: climate.set_hvac_mode
            target:
              entity_id: !input heating_entities
            data:
              hvac_mode: off # war: heat - Schaltet Heizung aus, wenn weg

      # --- DRITTE PRIORITÄT: ECO BEI SLEEP ---
      - conditions:
          - condition: trigger
            id: "occupation_change"
          - condition: state
            entity_id: !input flat_occupation_state
            state:
              - "Sleep"
        sequence:
          - service: climate.set_temperature
            target:
              entity_id: !input heating_entities
            data:
              temperature: !input eco_temperature
          - service: climate.set_hvac_mode
            target:
              entity_id: !input heating_entities
            data:
              hvac_mode: heat
              
      # --- NÄCHTLICHE ECO-UMSCHALTUNG UND RESET DER MANUELLEN EINGRIFFE ---
      - conditions:
          - condition: trigger
            id: "nightly_eco_time"
        sequence:
          # Szene löschen (Reset der manuellen Eingriffe)
          - service: scene.delete
            data:
              entity_id: "scene.heating_restore_{{ heating_entities | replace('.', '_') }}"
          # Nur wenn im Home/Guest Mode, dann Eco setzen
          - if:
              - condition: state
                entity_id: !input flat_occupation_state
                state: 
                  - "Guest Mode"
                  - "Home"
              - condition: template
                value_template: "{{ state_attr(heating_entities, 'hvac_action') != 'off' }}"
            then:
              - service: climate.set_temperature
                target:
                  entity_id: !input heating_entities
                data:
                  temperature: !input eco_temperature
              - service: climate.set_hvac_mode
                target:
                  entity_id: !input heating_entities
                data:
                  hvac_mode: heat


              
      # --- ZUSTAND WIEDERHERSTELLEN BEI ANKUNFT (NUR NACH AWAY UND WENN SZENE EXISTIERT) ---
      - conditions:
          - condition: trigger
            id: "occupation_change"
          - condition: state
            entity_id: !input flat_occupation_state
            state:
              - "Coming Home"
              - "Home"
          - condition: template
            value_template: "{{ trigger.from_state.state == 'Away' }}"
          - condition: template
            value_template: "{{ states('scene.heating_restore_' ~ (heating_entities | replace('.', '_'))) != 'unavailable' }}"
        sequence:
          - service: scene.turn_on
            target:
              entity_id: "scene.heating_restore_{{ heating_entities | replace('.', '_') }}"
    # --- STANDARD-LOGIK (WIRD AUSGEFÜHRT, WENN KEINE DER OBIGEN BEDINGUNGEN ZUTRIFFT) ---
    default:
      - if:
          # Bedingung 1: Scheduler wurde aktiviert UND Anwesenheitsstatus ist "Home"
          - condition: and
            conditions:
              - condition: template
                value_template: "{{ is_scheduler_active and is_state(flat_occupation_state, 'Home') }}"
              - condition: or
                conditions:
                  - condition: trigger
                    id: "schedule_change"
                  - condition: trigger
                    id: "occupation_change"
        then:
          - service: climate.set_temperature
            target:
              entity_id: !input heating_entities
            data:
              temperature: !input comfort_temperature
          - service: climate.set_hvac_mode
            target:
              entity_id: !input heating_entities
            data:
              hvac_mode: heat
      # Bedingung 2: Scheduler wurde deaktiviert UND Anwesenheitsstatus ist weiterhin "Home"
      - if:
          - condition: and
            conditions:
              - condition: trigger
                id: "schedule_change"
              - condition: template
                value_template: "{{ not is_scheduler_active and is_state(flat_occupation_state, 'Home') }}"
        then:
          - service: climate.set_temperature
            target:
              entity_id: !input heating_entities
            data:
              temperature: !input eco_temperature
          - service: climate.set_hvac_mode
            target:
              entity_id: !input heating_entities
            data:
              hvac_mode: heat
      - if:
          # Bedingung: Der Winter-Modus wurde gerade eingeschaltet.
          - condition: trigger
            id: "heating_toggle"
          - condition: template
            value_template: "{{ is_heating_season }}"
        then:
          - service: automation.trigger
            target:
              entity_id: "{{ this.entity_id }}"
            data:
              skip_condition: true